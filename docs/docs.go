// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "support@apimonitor.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/problems": {
            "get": {
                "description": "Get list of detected API problems with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "problems"
                ],
                "summary": "Get all API problems",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by problem type",
                        "name": "problem_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by severity",
                        "name": "severity",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort by field",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Problem"
                            }
                        }
                    }
                }
            }
        },
        "/api/proxy/{endpoint}": {
            "get": {
                "description": "Proxy API request through backend and log it",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "proxy"
                ],
                "summary": "Proxy request to JSONPlaceholder",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API endpoint to proxy",
                        "name": "endpoint",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Proxy API request through backend and log it",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "proxy"
                ],
                "summary": "Proxy request to JSONPlaceholder",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API endpoint to proxy",
                        "name": "endpoint",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Proxy API request through backend and log it",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "proxy"
                ],
                "summary": "Proxy request to JSONPlaceholder",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API endpoint to proxy",
                        "name": "endpoint",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Proxy API request through backend and log it",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "proxy"
                ],
                "summary": "Proxy request to JSONPlaceholder",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API endpoint to proxy",
                        "name": "endpoint",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/requests": {
            "get": {
                "description": "Get list of API requests with optional filtering and sorting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "requests"
                ],
                "summary": "Get all API requests",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by HTTP method (GET, POST, PUT, DELETE)",
                        "name": "method",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by exact response code",
                        "name": "response_code",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum response code",
                        "name": "min_response_code",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum response code",
                        "name": "max_response_code",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum response time in ms",
                        "name": "min_response_time",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum response time in ms",
                        "name": "max_response_time",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by start date (RFC3339 format)",
                        "name": "start_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by end date (RFC3339 format)",
                        "name": "end_date",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search in path",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort by field (created_at, response_time)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order (asc, desc)",
                        "name": "order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.APIRequest"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.APIRequest": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "method": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "response_body": {
                    "type": "string"
                },
                "response_code": {
                    "type": "integer"
                },
                "response_time": {
                    "type": "integer"
                }
            }
        },
        "models.Problem": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "problem_type": {
                    "type": "string"
                },
                "request_id": {
                    "type": "integer"
                },
                "severity": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "API Monitor Backend",
	Description:      "Backend API for monitoring and analyzing API requests",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
